<?php

class AcmeRepoServer {

    private $mailQueue = array();

    function __construct($settingsArr) {
        $this->notificationEmails = $settingsArr['notificationEmails'];
        $this->curloptUserPwd = $settingsArr['curloptUserPwd'];
        $this->repoManagerViewUrl = $settingsArr['repoManagerViewUrl'];
        $this->coName = $settingsArr['coName'];
        $this->debug = $settingsArr['debugMode'];
        $this->repo_service_url = $settingsArr['repo_service_url'];
    }

    function run() {

        foreach($this->getRepositories() as $repo) {

            $this->repo = $repo;
            $this->resetAndPull();
        }

        $this->sendPullSuccess(); 

        $this->processMailQueue();
    }

    function getResponseFromUrl($url, $post=false) {

        $handle = curl_init($url);

        curl_setopt($handle, CURLOPT_RETURNTRANSFER, TRUE);
        curl_setopt($handle, CURLOPT_FOLLOWLOCATION, true);

        if($post) {
            foreach($post as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }
            rtrim($fields_string, '&');
            curl_setopt($handle,CURLOPT_POST, count($post));
            curl_setopt($handle,CURLOPT_POSTFIELDS, $fields_string);
        }
        /* Get the HTML or whatever is linked in $url. */
        $response = curl_exec($handle);

        if($this->debug) var_dump($response);

        $httpCode = curl_getinfo($handle, CURLINFO_HTTP_CODE);

        curl_close($handle);

        if($httpCode !== 200 && in_array($httpCode,array(302,301,500,404))) {
            $this->handleError($url,array('errorThrown'=>$httpCode));
        }

        return $response;
    }

    function getRepositories() {

        return json_decode($this->getResponseFromUrl($this->repo_service_url,array('action'=>'repos')));
    }

    function sendPullSuccess() {


        var_dump($this->pullSuccess);
        $this->getResponseFromUrl($this->repo_service_url,$this->pullSuccess);
    }

    function resetAndPull() {

        $branch_name = end(explode('/',$this->repo->url));
        $repo_location = $this->repo->local_backup_location;

        $repo = Git::open($repo_location);

        $resetRsp = $repo->resetHard();

        $pullRsp = $repo->pull('origin',$branch_name);

        $responses = (compact('resetRsp','pullRsp'));

        if($this->debug) var_dump($responses);

        try {

            if(!strstr($resetRsp,"HEAD is now at "))
                Throw new Exception("Git Reset Hard Error");

            $pullErrs = array('rejected','non-fast-forward');

            foreach($pullErrs as $pullErr) {
                if(strstr($pullRsp,$pullErr)) {
                    Throw new Exception("Git Pull Error");
                }
            }

            $this->pullSuccess[$this->repo->id] = true;
        }
        Catch(Exception $e) {
            if($this->debug) var_dump($e->getMessage());
            $this->handleError($e, $responses);
            $this->pullSuccess[$this->repo->id] = false;
        }
    }

    function processMailQueue() {

        foreach($this->mailQueue as $email=>$jobs) {

            $msg = null;

            if(count($jobs) > 1) {

                foreach($jobs as $job) {

                    $msg .= $job['subject'] . "\r\n".$job['message']."\r\n-------------------------------------------------------------------\r\n";
                }

                if($this->debug) var_dump($email,$this->coName . " Repo Scanner - Important Notices",$msg);
                mail($email,$this->coName . " Repo Scanner - Important Notices",$msg);

            } else  {

                if($this->debug) var_dump($email,$jobs[0]['subject'],$jobs[0]['message']);
                mail($email,$jobs[0]['subject'],$jobs[0]['message']);
            }
        }

    }

    function handleError(Exception $e, $err) {

        foreach($this->notificationEmails as $email) {

            $this->mailQueue[$email][] = array(
              'subject'=>$this->coName . " Repo Scanner - " . $e,
              'message'=>"The following error information has been generated \r\n" . $this->errToString($err)
            );
        }
    }

    function errToString($err) {

        foreach($err as $k=>$v) {

            $errMsg .= "\t$k: $v\r\n";
        }

        return $errMsg;
    }
}
